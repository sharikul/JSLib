{"name":"JSLib","tagline":"Write normal JavaScript - in normal JavaScript.","body":"# What is JSLib?\r\n***\r\nJSLib is a new library of methods which aim to help you write beautiful and more functional code. \r\n\r\n# How to start using JSLib\r\n***\r\nJSLib is just another JavaScript file so it can be imported to your web pages via the HTML `script` tag, like so:\r\n```html\r\n<script src=\"jslib.js\"></script>\r\n```\r\n\r\n# Meet the functions/methods\r\n***\r\n1. `load`<br>\r\nThe `load` method is a wrapper for the `onload` event handler, to be used to run code whilst the current web page is being loaded to the user's web browser, i.e. images and files are being downloaded from a server somewhere.\r\n\r\n    ### Example\r\n    ```javascript\r\n    document.load(function() {\r\n    console.log(\"I'm being loaded!\");\r\n    });\r\n    ```\r\n2. `ready`<br>\r\nIf you're familiar with the jQuery JavaScript library, you'd know when or how to use the `ready` event handler. You would use the `ready` method in JSLib in (almost) exactly the same way. You should use this method if you're writing JavaScript code that's going to make use of HTML elements within the HTML `head` tag, like so:\r\n\r\n    ### Example\r\n    ```javascript\r\n    document.ready(function() {\r\n    console.log(\"I'm ready\");\r\n    });\r\n    ```\r\n3. `press`<br>\r\nThe `press` method is a wrapper around JavaScript's `onclick` event handler, which is run whenever a targeted element is clicked with a mouse (or tapped on a touchscreen device). Here's how you might use this method:\r\n    \r\n    ### Example\r\n    ```javascript\r\n    document.ready(function() {\r\n    var body = document.search(\"body\");\r\n    body.press(function() {\r\n    alert(\"I'm clicked!\");\r\n    // You'd be better off not alerting everytime the page is clicked.\r\n    });\r\n    });\r\n    ```\r\n4. `html`<br>\r\nThe `html` method will retrieve and return the `innerHTML` value of the linked element. That's pretty much it. Here's how you may go about using this method:\r\n\r\n    ### Example\r\n    ```javascript\r\n    document.ready(function() {\r\n    var h1 = document.search(\"h1\");\r\n    console.log(h1.html());\r\n    });\r\n    ```\r\n5. `addCSS`<br>\r\nThe `addCSS` method quite literally serves to do what it's called: to add CSS, i.e. to the linked element. The method accepts one parameter which is an object. In jQuery, for example, you provide an object to the `css` method to supply multiple properties to the linked object. Here's how you may use this method at its basic form:\r\n    \r\n    ### Example\r\n    ```javascript\r\n    document.ready(function() {\r\n    var body = document.search(\"body\");\r\n    body.addCSS({\r\n    background: \"red\",\r\n    padding: \"5px 10px\"\r\n    });\r\n    });\r\n    ```\r\nWhen the page has been loaded, in this case, the background colour of it will be red and it will have its padding set to `5px` top and bottom, and `10px` left and right. However, this method has been built to be more functional that what it seems. \r\n\r\n   ### Meet pipe nesting\r\n   A great feature of many CSS preprocessors (such as Sass) is that they allow you to nest sub-properties in one block to avoid repetition, thus enforcing the rule of DRY (don't repeat yourself). Here's an example: \r\n   ```css\r\n   font: {\r\n      family: sans-serif;\r\n      size: 20px;\r\n   }\r\n   ```\r\n\r\n    The generated CSS file will append `font` before each sub-property name, which is valid CSS. The  `addCSS` method also provides this cool functionality in its own way. Here's a demonstration, continuing    on from the previous example:\r\n\r\n   ```javascript\r\n   document.ready(function() {\r\n   var body = document.search(\"body\");\r\n   body.addCSS({\r\n   background: \"red\",\r\n   padding: \"5px 10px\",\r\n   \"font: family | size | weight\":\"sans-serif | 20px | lighter\"\r\n   });\r\n   });\r\n   ```\r\nOnce the webpage loads, `font` will be appended to each sub-property name, in this case: `family` becomes `font-family`, `size` becomes `font-size` and `weight` becomes `font-weight`. This is the syntax:<br>\r\n\r\n   `property: property-one | property-two | etc...`\r\n\r\n6. `toggle`<br>\r\nThis method toggles the display of the linked element. If the property is shown on the page, it'll be hidden, and vice versa. Here's how you may go about using this method.\r\n\r\n    ```javascript\r\n    document.ready(function() {\r\n    var toggle_button = document.search(\"#toggle-button\");\r\n    var elem_to_toggle = document.search(\"#elem-to-toggle\");\r\n    toggle_button.press(function() {\r\n    elem_to_toggle.toggle();\r\n    }); \r\n    });\r\n    ```\r\n7. `hover`<br>\r\nThe `hover` method replicates the `onmouseover` event handler, which lets you perform certain tasks when the mouse is over the targeted element. Here's how you may use this method:\r\n\r\n    ```javascript\r\n    document.ready(function() {\r\n    var body = document.search(\"body\");\r\n    body.hover(function() {\r\n    console.log(\"The user has moved their mouse over the page.\");\r\n    });\r\n    });\r\n    ```\r\n8. `leave`<br>\r\nThe `leave` method replicates the `onmouseleave` event handler of JavaScript, which lets you perform certain tasks when the mouse is moved away from the targeted element. Here's how you may use this method:\r\n\r\n    ```javascript\r\n    document.ready(function() {\r\n    var body = document.search(\"body\");\r\n    body.leave(function() {\r\n    console.log(\"The user has moved their mouse away from the page.\");\r\n    });\r\n    });\r\n    ```\r\n9. `setAttr`<br>\r\nAs you may have guessed, the `setAttr` method of JSLib sets an attribute to the linked element. In its basic form, it replicates the JavaScript `setAttribute` method. However, the `setAttr` method is actually more powerful than that. It lets you provide any number of attributes and write it in the way you'd write it in HTML, through the use of the `=` symbol, like this:\r\n\r\n    ```javascript\r\n    document.ready(function() {\r\n    var paragraph = document.search(\"p\"); // Let's imagine there's only one <p> tag on the page\r\n    paragraph.press(function() {\r\n    this.setAttr(\"title=You've hovered over me!|class=hover|disabled=false\");\r\n    });\r\n    });\r\n    ``` \r\nOnce the mouse clicks on the paragraph element, the function will assign the three attributes to it, resulting in:\r\n    ```html\r\n    <p title=\"You've hovered over me!\" class=\"hover\" disabled=\"false\">Paragraph tag here!</p>\r\n    ```\r\nHere's the syntax:\r\n   `attribute=value|another_attribute=another_value\"<br>\r\nHowever, do make sure that there's no spacing between the pipe symbol and attributes.\r\n\r\n10. `removeAttr`<br>\r\nThe `removeAttr` method removes attributes from the targeted element. Similarly to `setAttr`, it's able to work differently than what might be expected. Following on from the previous example for `setAttr`, where three attributes (`title`, `class`, `disabled`) had been set to a `<p>` tag, here's how the `removeAttr` method would be used to remove those attributes from the `<p>` tag:\r\n\r\n    ```javascript\r\n    document.ready(function() {\r\n    var paragraph = document.search(\"p\"); // Let's imagine there's only one <p> tag on the page\r\n    paragraph.press(function() {\r\n    this.removeAttr(\"title|class|disabled\");\r\n    });\r\n    });\r\n    ``` \r\nQuite simply, you'd provide the name of attributes you want to remove with the use of the pipe symbol. If it's the matter of removing one attribute, don't provide any! :)\r\n\r\n11. `getAttr`<br>\r\nThe `getAttr` method really has no special algorithm behind it to make it any special, so what it does, frankly, is return the value of the attribute that you selected from the targeted element. Following on from the previous examples, here's how you may use this method:\r\n    ```javascript\r\n    document.ready(function() {\r\n    var paragraph = document.search(\"p\"); // Let's imagine there's only one <p> tag on the page\r\n    paragraph.press(function() {\r\n    alert(this.getAttr(\"title\"));\r\n    // Of course, attempt to get the attribute of an element once you've actually set it!\r\n    });\r\n    });\r\n    ``` \r\n12. `trim`<br>\r\nThe `trim` method will remove any whitespace from the start and end of the linked string. That's basically it. Here's how you may use it:\r\n\r\n    ```javascript\r\n    document.ready(function() {\r\n    var lots_of_spaces = \"               Wow, look at the whitespace!                       \";\r\n    console.log(lots_of_spaces.trim());\r\n    });\r\n    ``` \r\nOnce the webpage is loaded, you'd get \"Wow, look at the whitespace!\" alerted without any spaces before and after (does the alert function even show whitespace?!).","google":"UA-40347397-1","note":"Don't delete this file! It's used internally to help with page regeneration."}